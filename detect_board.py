import cv2
import numpy as np
import pyautogui
import os
import tempfile
from recognize_pieces_positions import recognize_pieces_positions
from get_best_move import get_best_move
import time

CONTOUR_AREA_THRESHOLD = 500

# Does not detect chessboards of different sizes. Return 6 corners instead of 4.
def detect_chess_board(screen):
    gray = cv2.cvtColor(screen, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    chessboard_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > CONTOUR_AREA_THRESHOLD]

    if chessboard_contours:
        chessboard = max(chessboard_contours, key=cv2.contourArea)
        epsilon = 0.02 * cv2.arcLength(chessboard, True)
        corners = cv2.approxPolyDP(chessboard, epsilon, True)
        corners = corners.reshape(-1, 2)

        if len(corners) != 4:
            return None, None

        top_left, bottom_left, bottom_right, top_right = corners

        top_left_x, top_left_y = top_left
        bottom_left_x, bottom_left_y = bottom_left
        bottom_right_x, bottom_right_y = bottom_right
        top_right_x, top_right_y = top_right

        if abs(top_left_x - bottom_left_x) <= 2 and abs(top_right_x - bottom_right_x) <= 2 and abs(top_left_y - top_right_y) <= 2 and abs(bottom_left_y - bottom_right_y) <= 2:
            # To check images generated by this script. Create a processed folder first
            # if len(os.listdir('./processed')) == 0:
            #     cv2.imwrite('./processed/gray.jpg', gray)
            #     cv2.imwrite('./processed/blurred.jpg', blurred)
            #     cv2.imwrite('./processed/edges.jpg', edges)

            board_width = abs(top_left_x - top_right_x)
            board_height = abs(top_left_y - bottom_left_y)

            # Fixing issue of detecting smaller template boards.
            # Chess.com board size for home screen (Tested with Chrome browser) is 750x750.
            if board_width >= 750 or board_width <= 755:
                return corners, board_width

    return None, None

def return_optimal_move():
    past_notation = None
    my_move_count = 0
    while True:
        screenshot = pyautogui.screenshot()
        screen = np.array(screenshot)
        screen = cv2.cvtColor(screen, cv2.COLOR_RGB2BGR)
        chessboard_corners, board_size = detect_chess_board(screen)
        if chessboard_corners is not None:
            x, y, w, h = cv2.boundingRect(chessboard_corners)
            chessboard_region = screen[y:y+h, x:x+w]
            chessboard_region_resized = cv2.resize(chessboard_region, (752, 752))
            temp_file_path = tempfile.NamedTemporaryFile(suffix=".png", delete=False).name
            cv2.imwrite(temp_file_path, chessboard_region_resized)

            notation = recognize_pieces_positions(template_path=temp_file_path,
                                                  TOP_OFF=0,
                                                  LEFT_OFF=0)
            os.remove(temp_file_path)
            if notation != past_notation:
                if my_move_count % 2 == 0:
                    move_to_play = get_best_move(notation)
                    past_notation = notation
                    yield move_to_play
                my_move_count += 1
        else:
            move_to_play = 'Chess board not detected. Either: \n1. Start a game in chess.com\n2. See that the chess board is\n not obstructed by any other window.'
            yield move_to_play

# Debugging code and displaying optimal move in terminal

# return_optimal_move_generator = return_optimal_move()
# while True:
#     optimal_move = next(return_optimal_move_generator)
#     print(optimal_move)
#     time.sleep(1)